// Code generated by protoc-gen-go. DO NOT EDIT.
// source: instruments.proto

package inst_service

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Instrument struct {
	Id                   int32    `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Ticker               string   `protobuf:"bytes,2,opt,name=ticker" json:"ticker,omitempty"`
	Description          string   `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
	Exchange             string   `protobuf:"bytes,4,opt,name=exchange" json:"exchange,omitempty"`
	TickSize             float64  `protobuf:"fixed64,8,opt,name=tick_size,json=tickSize" json:"tick_size,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Instrument) Reset()         { *m = Instrument{} }
func (m *Instrument) String() string { return proto.CompactTextString(m) }
func (*Instrument) ProtoMessage()    {}
func (*Instrument) Descriptor() ([]byte, []int) {
	return fileDescriptor_instruments_3c8c5b4a7a2dcc13, []int{0}
}
func (m *Instrument) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Instrument.Unmarshal(m, b)
}
func (m *Instrument) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Instrument.Marshal(b, m, deterministic)
}
func (dst *Instrument) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Instrument.Merge(dst, src)
}
func (m *Instrument) XXX_Size() int {
	return xxx_messageInfo_Instrument.Size(m)
}
func (m *Instrument) XXX_DiscardUnknown() {
	xxx_messageInfo_Instrument.DiscardUnknown(m)
}

var xxx_messageInfo_Instrument proto.InternalMessageInfo

func (m *Instrument) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Instrument) GetTicker() string {
	if m != nil {
		return m.Ticker
	}
	return ""
}

func (m *Instrument) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Instrument) GetExchange() string {
	if m != nil {
		return m.Exchange
	}
	return ""
}

func (m *Instrument) GetTickSize() float64 {
	if m != nil {
		return m.TickSize
	}
	return 0
}

type InstrumentRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InstrumentRequest) Reset()         { *m = InstrumentRequest{} }
func (m *InstrumentRequest) String() string { return proto.CompactTextString(m) }
func (*InstrumentRequest) ProtoMessage()    {}
func (*InstrumentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_instruments_3c8c5b4a7a2dcc13, []int{1}
}
func (m *InstrumentRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InstrumentRequest.Unmarshal(m, b)
}
func (m *InstrumentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InstrumentRequest.Marshal(b, m, deterministic)
}
func (dst *InstrumentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InstrumentRequest.Merge(dst, src)
}
func (m *InstrumentRequest) XXX_Size() int {
	return xxx_messageInfo_InstrumentRequest.Size(m)
}
func (m *InstrumentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_InstrumentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_InstrumentRequest proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Instrument)(nil), "inst_service.Instrument")
	proto.RegisterType((*InstrumentRequest)(nil), "inst_service.InstrumentRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// InstrumentServiceClient is the client API for InstrumentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type InstrumentServiceClient interface {
	Get(ctx context.Context, in *InstrumentRequest, opts ...grpc.CallOption) (InstrumentService_GetClient, error)
}

type instrumentServiceClient struct {
	cc *grpc.ClientConn
}

func NewInstrumentServiceClient(cc *grpc.ClientConn) InstrumentServiceClient {
	return &instrumentServiceClient{cc}
}

func (c *instrumentServiceClient) Get(ctx context.Context, in *InstrumentRequest, opts ...grpc.CallOption) (InstrumentService_GetClient, error) {
	stream, err := c.cc.NewStream(ctx, &_InstrumentService_serviceDesc.Streams[0], "/inst_service.InstrumentService/Get", opts...)
	if err != nil {
		return nil, err
	}
	x := &instrumentServiceGetClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type InstrumentService_GetClient interface {
	Recv() (*Instrument, error)
	grpc.ClientStream
}

type instrumentServiceGetClient struct {
	grpc.ClientStream
}

func (x *instrumentServiceGetClient) Recv() (*Instrument, error) {
	m := new(Instrument)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for InstrumentService service

type InstrumentServiceServer interface {
	Get(*InstrumentRequest, InstrumentService_GetServer) error
}

func RegisterInstrumentServiceServer(s *grpc.Server, srv InstrumentServiceServer) {
	s.RegisterService(&_InstrumentService_serviceDesc, srv)
}

func _InstrumentService_Get_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(InstrumentRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(InstrumentServiceServer).Get(m, &instrumentServiceGetServer{stream})
}

type InstrumentService_GetServer interface {
	Send(*Instrument) error
	grpc.ServerStream
}

type instrumentServiceGetServer struct {
	grpc.ServerStream
}

func (x *instrumentServiceGetServer) Send(m *Instrument) error {
	return x.ServerStream.SendMsg(m)
}

var _InstrumentService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "inst_service.InstrumentService",
	HandlerType: (*InstrumentServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Get",
			Handler:       _InstrumentService_Get_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "instruments.proto",
}

func init() { proto.RegisterFile("instruments.proto", fileDescriptor_instruments_3c8c5b4a7a2dcc13) }

var fileDescriptor_instruments_3c8c5b4a7a2dcc13 = []byte{
	// 211 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0xcc, 0xcc, 0x2b, 0x2e,
	0x29, 0x2a, 0xcd, 0x4d, 0xcd, 0x2b, 0x29, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x01,
	0x09, 0xc5, 0x17, 0xa7, 0x16, 0x95, 0x65, 0x26, 0xa7, 0x2a, 0xf5, 0x33, 0x72, 0x71, 0x79, 0xc2,
	0xd5, 0x08, 0xf1, 0x71, 0x31, 0x65, 0xa6, 0x48, 0x30, 0x2a, 0x30, 0x6a, 0xb0, 0x06, 0x31, 0x65,
	0xa6, 0x08, 0x89, 0x71, 0xb1, 0x95, 0x64, 0x26, 0x67, 0xa7, 0x16, 0x49, 0x30, 0x29, 0x30, 0x6a,
	0x70, 0x06, 0x41, 0x79, 0x42, 0x0a, 0x5c, 0xdc, 0x29, 0xa9, 0xc5, 0xc9, 0x45, 0x99, 0x05, 0x25,
	0x99, 0xf9, 0x79, 0x12, 0xcc, 0x60, 0x49, 0x64, 0x21, 0x21, 0x29, 0x2e, 0x8e, 0xd4, 0x8a, 0xe4,
	0x8c, 0xc4, 0xbc, 0xf4, 0x54, 0x09, 0x16, 0xb0, 0x34, 0x9c, 0x2f, 0x24, 0xcd, 0xc5, 0x09, 0x32,
	0x27, 0xbe, 0x38, 0xb3, 0x2a, 0x55, 0x82, 0x43, 0x81, 0x51, 0x83, 0x31, 0x88, 0x03, 0x24, 0x10,
	0x9c, 0x59, 0x95, 0xaa, 0x24, 0xcc, 0x25, 0x88, 0x70, 0x50, 0x50, 0x6a, 0x61, 0x69, 0x6a, 0x71,
	0x89, 0x51, 0x24, 0xb2, 0x60, 0x30, 0xc4, 0xed, 0x42, 0x2e, 0x5c, 0xcc, 0xee, 0xa9, 0x25, 0x42,
	0xf2, 0x7a, 0xc8, 0x3e, 0xd2, 0xc3, 0xd0, 0x2c, 0x25, 0x81, 0x4b, 0x81, 0x12, 0x83, 0x01, 0x63,
	0x12, 0x1b, 0x38, 0x58, 0x8c, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0xcf, 0xfa, 0x97, 0xa4, 0x2b,
	0x01, 0x00, 0x00,
}
